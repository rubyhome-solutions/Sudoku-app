import sudoku_maker
import sudoku
from reportlab.lib.units import inch
from reportlab.platypus import *
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.rl_config import defaultPageSize
from reportlab.pdfgen import canvas
import sys
import random
from defaults import *
import os
import pickle
import time
import math

PAGE_WIDTH, PAGE_HEIGHT=defaultPageSize


styles = getSampleStyleSheet()

ParaStyle = styles["Normal"]

def generatePuzzle(difficulty='Any'):
    g = sudoku_maker.SudokuGenerator()
    while 1:
        puzzles = g.make_unique_puzzles(1)
        puz, d =  puzzles[0]
        #print d.value_string(), d.value
        if difficulty == 'Any' or d.value_string() == difficulty:
            break
    return puz, d

class NoPuzzle(Exception):
    pass

class MyUnpickler(pickle.Unpickler):
    def find_class(self, module, name):
        # help unpickle find the correct module (since sys.path is different 
        # from when we generated the puzzles)
        if module == 'sudoku':
            return getattr(sudoku, name)
        return pickle.Unpickler.find_class(self, module, name)

def loadPuzzles(num, difficulty='Any'):
    # indexfile = os.path.join(DATA_DIR, difficulty + ".index")
    indexfile = '/home/seamaster/sudokugen/sudokugen/lib/games/Any.index'
    index = file(indexfile).readlines()
    puzzlepaths = random.sample(index, num)
    puzzles = []
    g = sudoku_maker.SudokuGenerator()
    for path in puzzlepaths:
        path = path.strip()
        infile = os.path.join('/home/seamaster/sudokugen/sudokugen/lib/games/', path)
        puz = MyUnpickler(file(infile)).load()
        d = g.assess_difficulty(puz.grid)
        puzzles.append((puz, d))
    return puzzles

def renderPuzzle(page, puzzle, top, left, size, fontSize=24, thinLine=1, thickLine=4):
    right = left + size
    bottom = top - size
    page.saveState()

    box_height = size / 9
    for i in range(0, 10):
        if i in [0, 3, 6, 9]:
            page.setLineWidth(thickLine)
        else:
            page.setLineWidth(thinLine)
        page.line(left, top - i * box_height, right, top - i * box_height)
        page.line(left + i * box_height, top, left + i * box_height, bottom)

    s = puzzle.to_string()
    nums = s.split()
    #print puzzle
    page.setFont('Times-Bold',fontSize)
    for row in range(0, 9):
        for col in range(0, 9):
            num = nums[row * 9 + col]
            if num != '0':
                page.drawString(left + col * box_height + box_height * 0.38, top - row * box_height - box_height * 0.65, num)
    page.restoreState()

def generateFooter(page):
    page.setFont('Times-Bold',11)
    page.drawString(36, 60, "Generated by http://www.opensky.ca/~jdhildeb/software/sudokugen/ on %s GMT. Enjoy!" % (time.asctime(time.gmtime())))

def generatePage(puzzle, page, puzzlenum, difficulty='Any', showFooter=True):

    puz, d = puzzle

    top = PAGE_HEIGHT
    left = 36
    renderPuzzle(page, puz, top - 72 * 2, left, PAGE_WIDTH - 72, fontSize=24)

    page.setFont('Times-Bold',12)
    page.drawString(left, top - 72 * 1.5, "Puzzle %d (%s, difficulty rating %.02f)" % (puzzlenum, d.value_string(), d.value))
    if showFooter:
        generateFooter(page)
    return puz, d

def generateFourUpPage(puzzles, page, puzzlenum, difficulty='Any', showFooter=True):

    inch = 72
    top = PAGE_HEIGHT
    left = 36
    size = (PAGE_WIDTH - inch * 1.5) / 2
    coords = [
        (top - inch * 1, left),
        (top - inch * 1, left + size + inch * .5),
        (top - inch * 1 - size - inch, left),
        (top - inch * 1 - size - inch, left + size + inch * .5),
    ]

    i = 0
    for puzzle in puzzles:
        puz, d = puzzle
        renderPuzzle(page, puz, coords[i][0], coords[i][1], size, fontSize=16)
        page.setFont('Times-Bold',12)
        page.drawString(coords[i][1], coords[i][0] + inch * 0.25, "Puzzle %d (%s, difficulty rating %.02f)" % (puzzlenum + i, d.value_string(), d.value))
        i += 1

    if showFooter:
        generateFooter(page)
    return puz, d

def generateSolutions(page, puzzles, showFooter=True):
    col = row = 0
    i = 0
    for puz, d in puzzles:
        i += 1
        page.setFont('Times-Bold',8)
        page.drawString(36 + col * 72 * 2.5, PAGE_HEIGHT - 72 - row * 72 * 2.5 + 6, "Puzzle %d (%s, difficulty rating %.02f)" % (i, d.value_string(), d.value))
        solver = sudoku.SudokuRater(puz.grid,verbose=False, group_size=puz.group_size)
        solver.solve()
        renderPuzzle(page, solver, PAGE_HEIGHT - 72 - row * 72 * 2.5, 36 + col * 72 * 2.5, 72 * 2, fontSize=10, thickLine=2)
        col += 1
        if col == 3:
            col = 0
            row += 1
            if row == 4:
                col = row = 0
                if showFooter:
                    generateFooter(page)
                page.showPage()
    if showFooter:
        generateFooter(page)

def go(output_file, num, difficulty, showSolutions=True, showFooter=True, perPage=1):
    doc = canvas.Canvas(filename=output_file, pagesize=defaultPageSize)
    puzzles = loadPuzzles(num, difficulty)
    if perPage == 1:
        i = 0
        for puzzle in puzzles:
            i += 1
            generatePage(puzzle, doc, i, difficulty, showFooter)
            doc.showPage()
        if showSolutions:
            generateSolutions(doc, puzzles, showFooter)
            doc.showPage()
        doc.save()
    elif perPage == 4:
        for i in range(0, int(math.ceil(float(len(puzzles)) / 4))):
            plist = puzzles[i*4:(i+1)*4]
            generateFourUpPage(plist, doc, i * 4 + 1, difficulty, showFooter)
            doc.showPage()
        if showSolutions:
            generateSolutions(doc, puzzles, showFooter)
            doc.showPage()
        doc.save()



if __name__ == "__main__":
    import optparse
    parser = optparse.OptionParser(usage='usage: %prog [options] output-file')
    parser.add_option("-n", "--number", default=3, action="store", type="int", help="Number of puzzles to generate")
    parser.add_option("-d", "--difficulty", default='Any', help="Difficulty level.  Can be 'Any', 'Easy', 'Medium', 'Hard', 'Very hard'")
    parser.add_option("-p", "--per-page", default=1, action="store", type="int", help="Puzzles per page (1 or 4)")
    parser.add_option("-s", "--show-solutions", default=False, action="store_true", help="Show solutions to puzzles")
    parser.add_option("-f", "--show-footer", default=1, type="int", action="store", help="Show footer")
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("You must specify an output filename")

    filename = args[0]
    #print filename, options
    go(filename, options.number, options.difficulty, options.show_solutions, options.show_footer, options.per_page)
